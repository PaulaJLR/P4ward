import subprocess
from os import putenv
from pathlib import Path
from openbabel import pybel
from ..definitions import ROOT_DIR, CWD
from . import structure_tools


def rxdock_rescore(params, pose_obj, receptor_obj, ligase_obj, protac_obj):

    from . import md
    from . import megadock

    if params['minimize_protac']: dock_prm_file = 'minimize_score.prm'
    else: dock_prm_file = 'score.prm'

    # files
    folder = params['linker_scoring_folder']/ f'protac_{protac_obj.name}' / f"protein_pose_{pose_obj.pose_number}"
    combined_file = folder/'combined_protein.mol2'
    prep_protacs_file = folder/'protac_prep_confs.sdf'
    cavity_input_file = folder/'cavity.prm'
    scored_protacs_file = folder/'protac_scored_confs.sd'
    ##

    folder.mkdir(exist_ok=True, parents=True)
    # set to rxdock that this will be a folder with definitions (minimize)
    putenv('RBT_HOME', str(Path(ROOT_DIR)/'inputs'))
    # make combined receptor+ligase file with pymol
    structure_tools.pymol_combine(receptor_obj.active_file, pose_obj.file, out_filename=combined_file, assign_chains=True)

    # now we write the charges to the file generated by pymol
    ## first get the charges to the protein and ligase objects
    md.get_protein_charges(receptor_obj, ligase_obj)
    ## rotate the coordinates in ligase_obj to math the pose_obj
    pose_obj_charges = []
    for coords, charge in ligase_obj.charges:
        x,y,z = megadock.rotate_atoms(coords,  ref_rotation=pose_obj.parent.rotate, pose_rotation=pose_obj.rotate)
        x = round(x, 3); y = round(y, 3); z = round(z, 3)
        pose_obj_charges.append(((x,y,z), charge))
    ## replace the charges in the mol2 file generated by pymol_combine
    structure_tools.write_charges(receptor_obj.charges, pose_obj_charges, filepath=combined_file)


    # prepare protac sdf file with openbabel
    sampled_confs = pybel.readfile('sdf', str(pose_obj.protac_pose.file))
    prep_confs = pybel.Outputfile('sdf', str(prep_protacs_file), overwrite=True)
    for mol in sampled_confs:
        mol.OBMol.DeleteNonPolarHydrogens()
        prep_confs.write(mol)

    # prepare cavity
    cavity_input = open(Path(ROOT_DIR)/'inputs'/'cavity.prm').read()
    cavity_input = cavity_input.replace('[title]', combined_file.stem)
    cavity_input = cavity_input.replace('[receptor]', combined_file.name)
    cavity_input = cavity_input.replace('[conformations]', prep_protacs_file.name)
    with open(cavity_input_file,'w+') as cavity_file:
        cavity_file.write(cavity_input)
    
    # run cavity generation
    subprocess.run(
        ['rbcavity', '-r', cavity_input_file.name, '-W'],
        cwd=Path(CWD)/folder, # we have to change working dirs for rxdock to work properly
        stdout=subprocess.DEVNULL
    )

    # run rxdock
    command = [
        'rbdock', '-i', prep_protacs_file.name, '-o', scored_protacs_file.stem,
        '-r', cavity_input_file.name,
        '-p', dock_prm_file
    ]
    subprocess.run(command, cwd=Path(CWD)/folder, stdout=subprocess.DEVNULL)

    # update with new scored file
    protac_pose = protac_obj.get_pose(pose_obj)
    protac_pose.scored_file = scored_protacs_file


def capture_rxdock_scores(params, pose_obj, protac_obj):

    from openbabel import pybel

    score_type = params['rxdock_target_score']

    protac_pose = protac_obj.get_pose(pose_obj)
    confs = pybel.readfile('sdf', str(protac_pose.scored_file))
    for conf in confs:
        conf_number = int(conf.data['Name'].split('_')[-1]) # name in sdf file is format "conf_X"
        score = float(conf.data[score_type])

        linker_conf = [i for i in protac_pose.linker_confs if i.conf_number == int(conf_number)][0]
        linker_conf.rx_score = score
        linker_conf.data = dict(conf.data)
